name: Deploy to EKS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: konfio-customer-api
  EKS_CLUSTER_NAME: konfio-eks
  CONTAINER_NAME: konfio-customer-api

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./konfio-customer-api
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace konfio --dry-run=client -o yaml | kubectl apply -f -
        
        # Create ConfigMap for environment variables
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: konfio-customer-api-config
          namespace: konfio
        data:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NODE_ENV: "production"
          DB_TYPE: "mysql"
        EOF
        
        # Deploy the application
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: konfio-customer-api
          namespace: konfio
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: konfio-customer-api
          template:
            metadata:
              labels:
                app: konfio-customer-api
            spec:
              containers:
              - name: konfio-customer-api
                image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                ports:
                - containerPort: 3000
                envFrom:
                - configMapRef:
                    name: konfio-customer-api-config
                resources:
                  requests:
                    cpu: "100m"
                    memory: "128Mi"
                  limits:
                    cpu: "500m"
                    memory: "512Mi"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 3000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 3000
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: konfio-customer-api
          namespace: konfio
        spec:
          type: ClusterIP
          ports:
          - port: 80
            targetPort: 3000
          selector:
            app: konfio-customer-api
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: konfio-customer-api
          namespace: konfio
          annotations:
            kubernetes.io/ingress.class: "nginx"
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
        spec:
          tls:
          - hosts:
            - api.konfio.com
            secretName: konfio-customer-api-tls
          rules:
          - host: api.konfio.com
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: konfio-customer-api
                    port:
                      number: 80
        EOF
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/konfio-customer-api -n konfio 